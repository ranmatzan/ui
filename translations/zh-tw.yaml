languageName: "繁體中文(ZH-TW)"

##############################
# Really generic things used in multiple places (use sparingly)
##############################
generic:
  actions: 動作
  activate: 已啟用
  as: As
  closeModal: 關閉
  cancel: 取消
  default: 預設
  description: 描述
  disabled: 禁用
  domainName: 域名
  emptyString: ""
  enabled: 啟用
  expires: 到期
  id: ID
  image: 映像
  ipAddress: IP地址
  loading: "讀取中..."
  missing: "*%MISSING%*"
  moreActions: 更多操作
  na: 'N/A'
  name: 名稱
  none: 無
  remove: 移除
  role: 角色
  state: '狀態'
  type: 類型
  unknown: 未知

##############################
# Routes
##############################
accountsPage:
  index:
    header: 帳號
    localLink: 增加帳號
    table:
      state: 狀態
      id: Id
      kind: 類型
      username: 用户名
      name: 名稱
      identity: 身分
      noData: 当前无访问账号
      noName: 無
  new:
    header: 增加帳號
    form:
      username:
        labelText: "登入名稱"
        placeholder: "例如:jsmith"
      password:
        labelText: "密码"
      name:
        labelText: 姓名
        placeholder: "例如:John Smith"
      type:
        labelText: 帳號類型
        dropdownList: 空
      description:
        labelText: 描述
        placeholder: "例如:這是John Smith的帳號"

apiPage:
  header: "環境API Keys"
  actionButton: "增加環境API Key"
  content: |
    環境API Keys與當前環境(<code>{displayName}</code>)關聯，僅能用於管理當前環境的資源。當前環境中具有權限的其他帳號也能夠管理這些API Keys。
  labelText: '端点:'
  table:
    state: 狀態
    name: 名稱
    description: 描述
    publicValue: "Access Key"
    created: 已建立
    noData: "此環境還沒有建立API Keys"
    noName: 無
    noDescription: 無
    noPublicValue: "無public value"
  account:
    header: "帳號API Keys"
    buttonText: "增加帳號API Key"
    content:
      paragraph1: "帳號API Keys與你的用戶帳號關聯，"
      paragraph2: 能够建立、删除及管理您有權限訪問的所有環境。
    table:
      noData: "您還沒有建立任何帳號API Keys。"

auditLogsPage:
  header: 审计日志
  form:
    eventType:
      placeholder: 事件類型
    resourceType:
      placeholder: '資源類型:'
      dropdownPlaceholder: '選擇一種資源類型:'
      dropdownList:
    resourceId:
      placeholder: 资源ID
    requestIp:
      placeholder: 请求IP
    authType:
      placeholder: '驗證類型:'
      dropdownPlaceholder: '選擇驗證類型:'
      dropdownList:
    clearButtonText: 全部清除
    searchButtonText: 搜索
  table:
    time: 時間
    eventType: 事件类型
    description: 描述
    environment: 環境
    resourceTypeId: '资源类型:Id'
    identity: 认证用户
    authIp: 认证类型&IP

authPage:
  root:
    header: 存取控制
  github:
    header:
      text: GitHub存取控制
      accessEnabled: 已啟用
      accessNotEnabled: 未設定
      accessEnabledSubtext:
        wasRestricted: "{appName} 已設定為允許 {wasRestricted} 訪問。"
        wasNotRestricted:
          host: "{appName} 已設定為允許任何GitHub企業用戶訪問。"
          noHost: "{appName} 已設定為允許任何GitHub用户訪問。"
      noAccessConfigured:
        subtext: "{appName} 可以設定為允許一组 GitHub 用户和組織成員訪問。 由於當前未完成此設定，所以任何可以訪問此頁面(或API)的用户都對系統有完全控制權限。"
    authenticated:
      header:
        text: 認證訊息
        enterpriseHostName: '企業主機名稱:'
        clientId:
          text: '客户端ID:'
          helpText: 要修改設定的GitHub應用，請在下方禁用存取控制後重新設定。
      siteAccess:
        accessControl:
          header: 站點存取
          helpText: "設定允許哪些GitHub用户登入並使用 {appName}。 <b>注意:</b> 添加到環境的成員會自動被設定為允許訪問。"
          radio1: 允許任何GitHub用户
          radio2: 限制為特定GitHub用户及組織成員
          isRestricted:
            header: 已授權的用戶及組織
            noIdentity: 無
            saveAuthButton:
              saved: 已儲存
              saving: 儲存中...
              pre: 儲存授權設定
            helpText: "預設情况下，只有用户是環境成員時才允許登入和存取 {appName}。"
            customizeButton: 自訂
      disableAccess:
        header: 危險區域操作;
        warning: '<b class="text-danger">警告:</b> 禁用存取控制將導致任何能夠存取此頁面或API的用户擁有對  {appName}  的完全控制權限。'
        confirmDisable: "確認? 再次點選將關閉存取控制。"
        disable: 關閉存取控制
    notAuthenticated:
      header: "1. 設定GitHub用途"
      ul:
        li1:
          text: '標準版GitHub， <a href="https://github.com/settings/developers" target="_blank">點選此處</a> 在彈出的新視窗中進行用途設定。'
          ul:
            li1: "企業版GitHub，請登入你的帳號，點選Settings，然後點擊Applications進行設定。"
        li2:
          text: '點選 "Register new application" 並填寫表單內容:'
          ul:
            li1: '<b>Application name:</b> <span class="text-muted">任何您喜歡的應用名稱, 例如 My {appName}</span>'
            li2: "<b>Homepage URL: </b> "
            li3: '<b>Application description:</b> <span class="text-muted">Anything you like, optional</span>'
            li4: "<b>Authorization callback URL:</b>"
        li3:
          text: '點選 "Register Application" '
      form:
        headder: "2. 設定 {appName} 使用您的GitHub應用認證"
        subtext: "將新建立GitHub應用的Client ID和Secret複製黏貼到下方的對應輸入欄中"
        clientId:
          labelText: "Client ID"
        clientSecret:
          labelText: "Client Secret"
        ghEnterprise:
          labelText: 使用私有GitHub企業版佈署
        isGHEnterprise:
          labelText: 使用安全連線
        enterpriseHost:
          labelText: 企業主機名稱
          placeholder: '例如:github.example.com'
    testAuth:
      header: "3. 測試並啟用驗證"
      subtext: 測試認證來檢查您的應用程式設定是正確的
      buttonText:
        pre: GitHub驗證
        post: 等待GitHub回覆
  localAuth:
    header:
      enabled: "本地驗證 <b>已啟用</b>"
      disabled: '本地驗證 <b class="text-warning">未配置</b>'
    subtext:
      enabled:
        text: "{appName} 已設定為允許本地資料庫中的帳號存取。"
        linkText: 帳號管理
      disabled: "{appName} 能夠被設定為僅允許 {appName} 本地資料庫中定義的用戶訪問。 目前系統未進行設定， 因此任何訪問此頁面（或API）的用户都具有系统的完全控制權限。"
    accessEnabled:
      header: 危險區域操作;
      warning: '<b class="text-danger">警告:</b> 禁用存取控制將導致任何能够訪問此頁面或API的用户擁有對  {appName}  的完全控制權限。'
      buttonText:
        disable: "確認? 再次點選將關閉存取控制。"
        prompt: 關閉存取控制
    accessDisabled:
      header: "1. 設定管理員用戶"
      helpText: "該帳戶將成為管理員並擁有對 {appName} 的完全控制權限"
      form:
        login:
          labelText: 登入用戶名
          placeholder: '例如:jsmith'
        name:
          labelText: 全名
          placeholder: "例如:John Smith"
        password:
          labelText: 密碼
        confirmPassword:
          labelText: 確認密碼
    accessControl:
      header: 啟用存取控制
      helpText: 點選以開啟存取控制並登入
      buttonText:
        pre: 啟用本地驗證
        post: 啟用中...

catalogPage:
  index:
    header: 应用商店
    search:
      placeholder: 搜尋....
    certified: 官方認證
    noData:
      singular: 没有符合的应用模板
      plural: 当前目录下没有符合的应用模板

consolePage:
  header: '命令行:'
  closeButton: 關閉

certificatesPage:
  table:
    cn: 域名
    expiresDate: 到期時間
    noCn: 無
  detail:
    header: 憑證
    description: 描述
    info:
      labelText: 訊息
      valid: 生效時間
      expires: 到期時間
      algorithm: 算法
      issuer: 發布機構
      serialNumber: 序號
      version: 版本
    domainNames:
      labelText: 域名
  index:
    header: 憑證
    linkTo: 添加憑證
    table:
      header:
        state: 狀態
        name: 名稱
        domain: 域名
        expires: 到期時間
      body:
        noData: 目前未添加任何憑證
  new:
    header: 添加憑證
    form:
      name:
        placeholder: '例如:mydomain.com'
      description:
        placeholder: '例如:mydomain.com的EV憑證'

containersPage:
  table:
    ipAddress: IP位置
    primaryHost: 主機
    primaryHostUnknown: 未知
    image: 映像
    stats: 统计
    sparkPrefixCpu: "CPU: "
    sparkPrefixMemory: "記憶體:"
    sparkPrefixNetwork: "網路:"
    sparkPrefixStorage: "存儲:"
    command: 命令
    noCommand: 無
  index:
    header: 容器
    linkTo: 添加容器
    table:
      header:
        state: 狀態
        name: 名稱
        ip: IP位置
        host: 主機
        image: 映像
        command: 指令
      body:
        noData: 当前未创建任何容器。
  new:
    form:
      name:
        placeholder: '例如:myapp'
      description:
        placeholder: '例如:我的應用'
  containerPage:
    header: '容器:'
    subtext:
      on: 位於
      in: 所屬服務
    infoMultiStats:
      tooltip:
        host: 複製到剪貼簿
      host: '主機:'
      ip: '容器IP:'
      docker: "Docker ID:"
      image: '映像:'
      command: '命令:'
      entryPoint: '入口:'
      description: '描述:'
    navTabs:
      labels: '標籤:'
      volumes: 卷
      ports: 連接埠
    portsTab:
      table:
        header:
          state: 狀態
          ip: IP位置
          public: 主机映射端口
          private: 容器私有端口
          protocol: 協定
        body:
          state: 狀態
          ip: IP位置
          public: 主機映射連接埠
          private: 容器內部連接埠
          protocol: 協定
          noData: 此容器未暴露任何連接埠。
    volumesTab:
      table:
        header:
          state: 狀態
          mount: 掛載點
          shared: 共享
          writable: 可寫
        body:
          state: 狀態
          mount: 掛載點
          shared: 共享
          writable: 可寫
          error:
            data: '錯誤:'
            error: 錯誤
            noData: 该容器未使用卷
          noContainers: 無其他容器

containerSubpod:
  childContainers: 容器
  childSidekicks: 从

# If you change translations here also change the translation in app/utils/constants.js under the FALLBACK_TRANSLATIONS key
# those are present incase we have an error in the app and can not load the translations file
# the error page will at least make a little sense
failWhalePage:
  header: 錯誤
  reloadButton: |
    <a href="#" onclick="window.location.href = window.location.href; return false;">重新載入</a> 以重試或
  logoutButton: 登出

haPage:
  header:
    enabled: '高可用已 <b class="text-success">啟用</b>'
    disabled: 高可用未設定
  haConfigured:
    addHost:
      header: '5. 增加主機'
      subtext: 複製下載的腳本並在每台高可用主機執行註冊
    hosts:
      header: '主機:'
      waiting: 等待主機加入...
      managementServerCert:
        text: 管理伺服器憑證
        waiting: 等待主機加入...
    disable:
      header: 危险区域&trade;
      confirm:
        pre: 確認？再次點選將關閉高可用存取
        prompt: 禁止高可用
  haDisabled:
    header: "1. 設定外部資料庫"
    subtext: "此 {appName} 設定為使用內部資料庫伺服器，但是高可用佈署需要獨立的MySQL資料庫伺服器。"
    externalDatabase:
      ul:
        li1:
          text: 安裝外部資料庫事例
          ul:
            li1: "可以使用Amazon RDS或Google Cloud SQL等託管解決方案"
            li2: 或者自承載的或多主機叢集
        li2: 點選下方匯出資料庫按鈕匯出整個資料庫
        li3: 匯入到新的外部資料庫
      exportDatabase: 匯出資料庫
      size: 資料庫大小
      noLocalDb:
        header: "1. 設定外部資料庫"
        subtext: '完成，已使用外部資料庫運行。'
    databaseUsage:
      localDb:
        header: '2. 使用新的外部資料庫'
        ul:
          li1: '通過以下命令重新啟動伺服器容器並指向外部資料庫'
          isRancher:
            li1: '<a href="http://docs.rancher.com/rancher/installing-rancher/installing-server/#using-an-external-database" target="_blank">查看文档</a> 以获取更多信息。'
      noLocalDb:
        header: '使用新的外部資料庫'
        subtext: '完成， <code>{dbHost}</code> 將作為高可用性佈署的外部資料庫。'
    haConfigScript:
      generated:
        header: '3. 產生高可用設定腳本'
        subtext: '完成'
      notGenerated:
        header: '3. 產生高可用設定腳本'
        subtext: '完成設定外部資料庫運行後回到此處'
      form:
        clusterSize:
          labelText: 叢集規模
          radio1: '<span class="text-bold" style="display: inline-block: width: 120px;">1 台主機:</span> 無高可用'
          radio2: '<span class="text-bold" style="display: inline-block: width: 120px;">3 台主機:</span> 任意 <b>1 台</b> 主機發生故障時系統可繼續運行'
          radio3: '<span class="text-bold" style="display: inline-block: width: 120px;">5 台主機:</span> 任意 <b>2 台</b> 主機發生故障時系統可繼續運行'
        hostRegistration:
          helpText:
            singleCluster: '此處應設定為FQDN，此FQDN解析為高可用主機位址或負載平衡全部高可用主機的負載平衡位址。不要包含<code>/v1</code>或其它路徑訊息。'
            multiCluster: '此處應設定為FQDN，此FQDN解析為稿可用主機位址或負載平衡全部 {clusterSize} 台高可用主機的負載平衡位址。不要包含<code>/v1</code>或其它路徑訊息。'
        certificate:
          labelText: 憑證
          radio1: '產生自己簽名憑證'
          radio2:
            noHostUrl: '上傳憑證'
            hasHostUrl: '上傳憑證用於 <code>{hostRegistrationUrl}</code>'
        listeningPorts:
          labelText: 監聽埠
          table:
            https: HTTPS
            http: HTTP
            swarm: Swarm
            proxyToHttps: '<a href="http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt" target="_blank">PROXY</a> to HTTPS'
            proxyToHttp: '<a href="http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt" target="_blank">PROXY</a> to HTTP'
            redis: Redis
            zookeeperClient: ZooKeeper 客戶端
            zookeeperQuorum: Zookeeper 仲裁
            zookeeperLeader: ZooKeeper Leader
      configScriptButton:
        pre: 產生設定腳本
        post: '產生中...'
      downloadScript:
        downloaded:
          header: '4. 下載腳本'
          subtext: '完成，請查看下載目錄。'
        notDownloaded:
          header: '4. 下載腳本'
          subtext: '點選下方按鈕以下載命令列脚本。'
          alert: |
              腳本產生新的金鑰用於高可用主機間的通訊，確保相關訊息安全。
              每次您下載設定腳本時將產生新的金鑰，為確保高可用正常工作，所有的主機必須擁有相同的金鑰。
          buttonText: 下載設定腳本
          generateScript: '產生步驟3中的腳本'

helpPage:
  header: 常用連結及資訊
  banner: 公告
  releaseText: '釋出時間:'
  environment:
    header: 什麼是環境？
    content: |
      <p>{appName} 支援將資源分組歸屬到多個環境中。每個環境具有自己獨立的基礎架構資源及服務，並由一個或多個用戶、團隊或組織所管理。</p>
        <p>例如，您可以創建獨立的“開發”、“測試”及“生產”環境以確保環境之間的安全隔離，將“開發”環境的存取權限賦予全部人員，但限制“生產”環境的存取權限給一個小的團隊。</p>
    manageLink: 管理環境
  host:
    header: 什麼是主機？
    content: |
      在增加第一個服務或容器前，必須最少加入一台支援Docker{minVersion} 或以上版本的Linux主機，該主機需要能夠通過HTTP方式存取{appName} 伺服器。{appName} 支援增加多種形式的Linux主機，
        包含由任何公有雲、私有雲或裸機方式提供的虛擬機或實體機。
    contentLink: 了解更多
    addHostLink: 增加主機
  stacks:
    header: 什么是應用棧和服務？
    content:
      paragraph1: |
        簡單的說，服務是一組由相同docker映像建立的容器，Rancher服務擴展了Docker的“link”概念以利用{appName}的輕量級分布式DNS服務用於服務發現。服務可以單獨增加或通過應用商店佈署。
      paragraph2: '服務也能夠利用其他{appName}內建服務，如負載均衡、健康監控、升級支援以及高可用。'
      #' fixes syntax highlighting so i dont go crazy
      link: 了解更多
    addServiceLink: 管理服務
    addCatalogLink: 透過應用商店增加服務
    noHosts: 目前環境未增加主機。請在增加服務前先新增主機。
    manageServiceLink: 管理服務
  issues:
    header:
      text: 問題及文件
      tagline: 發現問題？
      fileBug: 提交Bug
    content:
      paragraph1: |
        {appName}是一個開源的軟體平台，實現了一個在生產環境中運行容器的專用基礎設施。Docker容器，作為一個越來越受歡迎的應用程式工作負載，對於基礎設施服務，包括網路、存儲、負載平衡器、安全、服務發現及資源管理等各方面提出了新的需求。
      graphic1:
        text: 發現bug？
        link: 在GitHub上提出問題
      graphic2:
        text: 更多有用資訊
        link: |
          <a href="{docsLink}" target="_blank">關於使用{appName} 請參考官方文件</a>
          <br/>或 <a href="{companyLink}/learn/" target="_blank">觀看我們的快速上手文件</a>
      graphic3:
        text: 需要故障診斷協助？
        link: 參考我們的常見問題解答
  forums:
    header: 論壇資訊
    tagline: 加入討論
    buttonText: 進入論壇
    annoucements:
      header: 公告
      annouceText: |
        <strong>最新版本:</strong><a href="{latestLink}" target="_blank">{latestTitle}</a>
      releaseText: |
    general:
      header: 綜合
      buttonText: 查看更多綜合討論
    rancherOs:
      header: RancherOS
      buttonText: 查看更多RancherOS討論
    rancher:
      header: Rancher
      buttonText: 查看更多Rancher討論
    convoy:
      header: Convoy
      buttonText: 查看更多Convoy討論
  commercial:
    header: 商用支援
    content: |
      Rancher Labs提供對{appName}的商業化的企業級支援服務，包括24x7技術支援團隊、漏洞優先修復等。此外我們還提供實行、整合及顧問服務以滿足不同組織佈署及擴展{appName}的需求。關於上述服務的詳細訊息，請聯繫我們的業務團隊<a href="mailto:sales@rancher.com">sales@rancher.com</a>。

hostsPage:
  addContainer: 增加容器
  index:
    header: 主機
    addHost: 增加主機
    tooltip:
      listView: 列表
      groupedView: 分组
    columns:
      emptyMessage: 當前沒有主機或容器
  new:
    header:
      linkTo: "主機: "
      text: 增加主機
    manageLink: 管理docker-machine驅動
    form:
      name:
        placeholder: 例如:host01
  hostPage:
    header:
      linkTo: '主機:'
    addContainer:
      linkTo: 增加容器
    infoMultiStats:
      ip: 'IP:'
      cpu: 'CPU:'
      memory: '記憶體:'
      storage: '存儲:'
      provider:
        labelText: '提供者:'
        noHost: 自訂義
      kernel: '核心:'
      docker: 'Docker:'
      os: '作業系統:'
      description: '描述:'
    navTabs:
      containers: 容器
      ports: 連接埠
      labels: 標籤
      storage: 存儲
    containersTab:
      table:
        header:
          state: 狀態
          name: 名稱
          ip: IP位址
          image: 映像(命令)
          stats: 統計
        body:
          noData: 主機目前未運行任何容器
    portsTab:
      table:
        header:
          ip: IP位置
          port: 連接埠
          service: 服務
          container: 容器
        body:
          noData: 主機目前未對應任何連接埠
    storageTab:
      table:
        header:
          state: 狀態
          hostPath: 主機路徑
          mounts: 掛載
        body:
          noData: 主機未使用任何資料卷

k8sTab:
  kubectl:
    header: kubectl
    stepOne:
      generateConfigText: |
        要在你的工作站使用 <a href="http://kubernetes.io/docs/getting-started-guides/docker/#download-kubectl" target="_blank">kubectl</a> (v1.2及以上) ，點選按鈕生成API Key及設定文件:
      generateButton: 產生設定
    stepTwo:
      progress: 產生中...
    stepThree:
      helpText: |
        將設定保存到 <code>~/.kube/config</code>:
      downloadText: |
        然後 <a href="http://kubernetes.io/docs/getting-started-guides/docker/#download-kubectl" target="_blank">下載</a> (如果需要) 並運作 <code>kubectl</code>
    shell:
      helpText: |
        或透過下面的命令直接運作 <code>kubectl</code> 命令:
  multistat:
    header:
      type: '類型:'
      cluster: 'Cluster IP:'
      balancer: 'Balancer IP:'
      session: '会话关联:'
      external: '外部IPs:'
      selectors: 'Selectors'
  navTabs:
    pods: Pods
    labels: Labels
    ports: 連接埠
  namespace:
    pods:
      index:
        header: Pods
        linkTo: 增加Pod
        table:
          header:
            status: 狀態
            containers: 容器
            host: 主機IP
            pod: Pod IP
          body:
            noData: 目前未建立任何Pod
      pod:
        header:
          linkTo: 'Pod:'
        type:
          header: '類型:'
        navTabs:
          containers: 容器
    rcs:
      index:
        header: RCs
        linkTo: 增加RC
        table:
          header:
            replicas: 複本
            selectors: Selectors
            containers: 容器
          body:
            noData: "當前未建立任何Replication Controller"
      rc:
        header: 'RC:'
        navTabs:
          pods: Pods
          labels: Labels
          ports: 連接埠
    services:
      header: 服務
      linkTo: 增加Service
      table:
        header:
          cluster: "Cluster IP"
          pods: Pods
          ports: 連接埠
          selectors: Selectors
        body:
          noData: 當前未建立任何Service
      service:
        index:
          header: '服務:'
  namespaces:
    header: 命名空間
    linkTo: 增加命名空間
    table:
      body:
        noData: 目前未建立任何命名空間

loginPage:
  greeting: "你好！<br>歡迎使用 {appName}"
  githubMessage: "{appName} 使用GitHub管理帳號和團隊。點選以下按鈕以登入，我們將僅使用基本的GitHub帳號資訊。"

machinePage:
  header: 主機驅動
  inactive: 未啟用
  download: 下載驅動包
  upgradeAvailable: 有可用更新
  upgrading: 更新中
  activating: 啟用中
  viewUi: 查看UI
  subtext: "此處可增加額外的 <code>docker-machine</code> 驅動並在增加主機介面使用。"
  add: 增加主機驅動
  builtin: 內建
  other: 其他
  table:
    header:
      state: 狀態
      name: 名稱
      url: 驅動URL
      uiUrl: UI URL
      checksum: 校驗和
    noData: 沒有主機驅動

mesosPage:
  header: 概覽
  actionLink: 打開Mesos UI

  banner:
    header: 叢集
    content: |
      目前有 {hosts, plural,
        =1 {# 台活動主機}
        other {# 台活動主機}
      } 在Mesos群集中
    link: 查看或增加主機

  launch:
    header: 啟動
    content: 從我們的應用商店中啟動框架
    button: 啟動框架

  manage:
    header: 管理
    content: "透過Mesos UI管理Mesos"
    button: "Mesos UI"

# If you change translations here also change the translation in app/utils/constants.js under the FALLBACK_TRANSLATIONS key
# those are present in case we have an error in the app and can not load the translations file
# the error page will at least make a little sense
notFoundPage:
  header: 查看的頁面不存在！
  linkTo: 回到首頁

registriesPage:
  index:
    header: 映像倉庫
    linkTo: 增加映像倉庫
    table:
      header:
        state: 狀態
        address: 位址
        email: 電子郵件
        username: 用户名
        created: 建立時間
      body:
        noData: 目前未建立任何映像倉庫
  new:
    header: 增加映像倉庫
    form:
      custom:
        labelText: 位址
        placeholder: '例如:registry.example.com'
      email:
        labelText: 電子郵件
        placeholder: '例如:you@example.com'
      username:
        labelText: 用户名
        placeholder: '例如:username'
      password:
        labelText: 密碼
        placeholder: '例如:password'

servicePage:
  header: '服務:'
  multistat:
    type: '類型:'
    fqdn: 'FQDN:'
    scale: '規模:'
    image: '映像:'
    entryPoint: '入口:'
    command: '命令:'
    description: '描述'
    global: 全局
  external:
    externalIp: 外部IPs
    externalHostname: '外部主機名:'
  navTabs:
    ports: 連接埠
    containers: 容器
    labels: 標籤
    links: 鍊接
  containersTab:
    table:
      header:
        ipAddress: IP位址
        host: 主機
        image: 映像
        stats: 統計
      body:
        noData: 服務目前沒有任何容器
  linksTab:
    header: 連接
    noData: 無連接
  new:
    form:
      name:
        placeholder: '例如:myapp'
      description:
        placeholder: '例如:我的應用'
  newAlias:
    form:
      name:
        placeholder: '例如:myapp'
      description:
        placeholder: '例如:MyApp最新版本'
  newBalancer:
    form:
      name:
        placeholder: '例如:website'
      description:
        placeholder: '例如:mycompany.com的負載平衡'
  portsTab:
    table:
      header:
        port: 連接埠
        host: 主機IP
      body:
        noData: 服務沒有暴露任何連接埠
    notActive: 連接埠僅當服務處於活動狀態時可見

settingsPage:
  index:
    header: 環境
    linkTo: 增加環境
    subtext: |
      <p> {appName} 支援將資源分組歸屬到多個<b>環境</b>中。每個環境具有自己獨立的基礎架構資源及服務，並由一個或多個用戶、團隊或組織所管理。</p>
      <p>例如，您可以創建獨立的“開發”、“測試”及“生產”環境以確保環境之間的安全隔離，將“開發”環境的存取權限賦予全部人員，但限制“生產”環境的存取權限給一個小的團隊。</p>

    alert: 當前沒有活動環境。在進行其他操作前，需要先建立或啟用一個環境。
    table:
      header:
        orchestration: 編排
      body:
        noData: 當前未建立任何環境

stacksPage:
  header:
    all: 全部應用
    user: 用戶應用
    system: 系統應用
  actionButton: 增加應用棧
  sort:
    label: 排序
    state: 狀態
    name: 名稱
  noSystemStacks: 當前沒有系統應用
  new:
    header: 增加應用棧
    composeLabel: '可選:匯入Compose'
    form:
      name:
        placeholder: '例如:myapp'
      description:
        placeholder: '例如:我的應用'
      dockerCompose:
        label: '可選:docker-compose.yml'
        placeholder: docker-compose.yml文件的内容
      rancherCompose:
        label: '可選:rancher-compose.yml'
        placeholder: rancher-compose.yml文件的内容
      startOnCreate:
        label: 建立後啟動服務

storagePoolsPage:
  index:
    header: 存儲池
    noData: 無存儲池
  newVolume:
    header: 增加卷
    form:
      driverOptions: 驅動選項
      addActionLabel: 增加選項

swarmPage:
  projects:
    index:
      header: 項目
      linkTo: 增加項目
      table:
        header:
          services: 服務
        body:
          noData: 目前沒有任何項目
    new:
      header: 增加項目
      form:
        name:
          placeholder: '例如:myapp'
        description:
          placeholder: '例如:MyApp Project'
        variables:
          addActionLabel: 新增變量替代
          keyLabel: 變量
          keyPlaceholder: '例如:foo'
          valuePlaceholder: '例如:bar'
        dockerCompose:
          labelText: dcoker-compose.yml
          placeholder: 貼上docker-compose.yml文件的內容
    project:
      linkTo: '項目:'
      table:
        header:
          ports: 連接埠
          containers: 容器
        body:
          noData: 目前項目未包含任何服務
  services:
    header: 服務
    table:
      header:
        ports: 連接埠
        containers: 容器
      body:
        noData: 目前沒有任何服務

processesPage:
  indexPage:
    header: 處理
    tabNav:
      running: 運行中
      all: 全部
    form:
      resourceType: '選擇資源類型:'
      resourceId:
        placeholder: 資源ID
      processName:
        placeholder: 處理名
      clear: 清除
      search: 搜尋
    table:
      header:
        id: ID
        processName: 名稱
        resource: '資源類型:ID'
        exitReason: 退出原因
        startTime: 開始時間
        endTime: 結束時間
        duration: 持續時間
      noData: 無處理程序
  processPage:
    header: 設定

virtualMachinePage:
  header: '虛擬機:'
  multistat:
    host: '主機:'
    hostIp: '主機IP:'
    vmIp: '虛擬機IP:'
    image: '映像:'
    description: '描述:'
  navTabs:
    labels: 標籤

virtualMachinesPage:
  header: 虛擬機
  linkTo: 新增虛擬機
  table:
    body:
      noData: 目前沒有任何虛擬機

waitingPage:
  hosts:
    header: |
      {expectHosts, plural,
        =1 {新增第一台主機}
        other {新增主機}
      }
    content: |
      至少需要新增 {expectHosts, plural,
        =1 {1台支援}
        other {# 台支援}
      } Docker {minVersion} 或以上版本的Linux主機，該主機需要能夠通過HTTP方式存取{appName} 伺服器。<br/>
      {appName} 支援新增多種形式的Linux主機，包含由任何公有雲、私有雲或裸機方式提供的虛擬機或時體機。
    contentLink: 了解更多
    linkToHost: 新增主機
    setup:
      mesos: 設定Mesos
      swarm: 設定Swarm
      kubernetes: 設定Kubernetes

##############################
# Partials
##############################
aliasServicePartial:
  serviceLinks:
    labelText: 服務連接
    linkTo: 查看詳情
  links: 連接
  noLinks: 無連接
  description: '描述:'

externalServicePartial:
  extService:
    labelText: 外部服務
    linkTo: 查看詳情
  ips: IPs
  hostname: '主機名稱:'
  description: '描述:'

hostPartial:
  host:
    addCommon:
      quanity: 數量
      new:
        form:
          name:
            placeholder: '例如:host01'
    addOptions:
      labels: 標籤

ldap:
  providerName:
    openldap: OpenLDAP
    ad: Active Directory活动目录
  configuredIndication:
    header:
      providerName: "{providerName} 是"
      enabled: 啟用
      disabled: 停用
      subtext:
        enabled: "{appName} 已設定為允許任何 {providerName} 用戶存取。"
        disabled: "{appName} 可以設定為允許特定的用戶和群組成員存取。當前系統未設定，任何能夠訪問此頁面或API的用户擁有對 {appName} 的完全控制權限。"
  accessEnabled:
    header: 驗證
    subtext: 如需修改伺服器配置，請在下方關閉存取控制後重新設定。
    general:
      header: 一般
      server: '伺服器:'
      tls: 'TLS:'
      serviceAccount: '服務帳號:'
      searchBase: '搜尋基準:'
      defaultDomain: '預設域名:'
    users:
      header: 用戶
      objectClass: '對象類別:'
      login: '登入領域:'
      name: '名稱領域:'
      search: '搜尋領域:'
      enabled: '啟用領域:'
      disabledBitMask: '關閉位元遮罩:'
    group:
      header: 群組
      objectClass: '對象類別:'
      name: '名稱領域:'
      search: '搜尋領域:'
    disable:
      header: 危險區域&trade;
      warning: '<b class="text-danger">警告:</b> 禁用存取控制將導致任何能夠存取此頁面或API的用戶擁有對  {appName} 的完全控制權限。'
      confirmDisable:
        pre: 關閉存取控制
        post: "確定? 再次點選將關閉訪問控制。"
  accessConfig:
    header: "1. 設定 {providerName} 伺服器"
    subtext1: "請輸入位置、連接埠及協定以連接你的 {providerName} 伺服器。<code>389</code> 是標準連接埠（未加密）, <code>636</code> 是加密連接（TLS）埠。"
    subtext2: "{appName} 需要一個可登入所有區域的唯讀權限帳號，當他們建立一個要求與API key，可讓我們決定哪個群組的使用者是成員。"
    hostName:
      labelText: 主機名或IP位置
    port:
      labelText: 連接埠
      checkbox: TLS
    serviceUsername:
      labelText: 服務帳號名
    servicePassword:
      labelText: 服務帳號密碼
    searchBase:
      helpText: 僅當用戶和群組在搜尋基礎下時才會被使用
      labelText: '搜尋基準:'
      placeholder: "例如:dc=mycompany,dc=com"
    defaultDomain:
      helpText: 當用戶未指定登入域名時的預設使用該域名
      labelText: 預設登入域名
      placeholder: '例如:mycompany'
  customizeSchema:
    header: "2. 自訂架構"
    helpText: 如果你的AD架構(schema)不是標準格式，可以在這裡進行自訂義設定。
    users:
      header: 使用者
      objectClass:
        labelText: 對象類型
      login:
        labelText: 登入領域
      name:
        labelText: 名稱領域
      search:
        labelText: 搜索領域
      status:
        labelText: 狀態領域
      disabledBitMask:
        labelText: 禁用狀態位元遮罩
    groups:
      header: 群組
      objectClass:
        labelText: 對象領域
      name:
        labelText: 名稱領域
      search:
        labelText: 搜索領域
  testAuth:
    header: "3. 測試並啟用驗證"
    helpText: "透過你的 {providerName} 帳號進行驗證測試以確認配置是否正確:"
    userName:
      labelText: 你的用戶名
    password:
      labelText: 你的密碼
    authenticate:
      pre: 驗證
      post: "測試中..."

servicePartial:
  noContainers:
    label: 沒有容器
    inactive:
      start: 啟動

serviceInfoPartial:
  info:
    label: 資訊
    linkTo: 查看詳情
  image: '映像:'
  entryPoint: '入口:'
  command: '命令:'
  description: '描述:'
  containers: 容器
  scale: 數量
  noContainers: 無容器
  ports: 連接埠
  noPublicPorts: 無連接埠映射
  links: 連接
  noLinks: 無連接
  fqdn: 'FQDN:'
##############################
# Components
##############################
accountRow:

advancedSection:
  hrText: 進階選項

catalogSettings:
  header: 應用商店
  subtext: 應用商店包含應用rancher-compose的範本，允許用戶通過回答設定問題後簡單地進行應用佈署。
  rancherCertified:
    header:
      rancherCertified: "{appName} 官方認證"
      plCertified: 官方認證
    helpText:
      isRancher: 官方認證範本由Rancher Labs維護並提供升級
      community: 正是維護和支援範本
  community:
    header: 社區貢獻
    helpText:
      text: 由社區成員建立並維護的範本
      isRancher: "未經過Rancher Labs認證"
  more:
    header: 更多
    helpText: '此處可增加自訂義的應用商店。每個應用商店必須有唯一的名稱和能進行 <code>git clone</code> 操作的URL。（更多信息请参考此 <a href="https://git-scm.com/docs/git-clone#_git_urls_a_id_urls_a" target="_blank">文件</a>）'
    addActionLabel: 增加應用商店
    keyLabel: 名稱
    keyPlaceholder: '例如:mycatalog'
    valueLabel: URL
    valuePlaceholder: '例如:https://github.com/mycompany/mycatalog.git'

confirmDelete:
  title: 確認是否要刪除
  environmentNote: "注意:此環境內的所有資源都將被永久性的刪除，包含通過{appName}建立的主機。"
  protip: "進階技巧:在點選刪除時按住 {key} 鍵以跳過確認操作。"
  confirmAction: 刪除
  cancelAction: 取消

containerLogs:
  title: "日誌: {instanceName}"
  onlyCombined: "<b>注意:</b> 此容器運作時帶有TTY(-t)參數，僅有合併的標準輸出和標準錯誤日誌"
  combined: 合併日誌
  stdout: 標準輸出
  stderr: 標準錯誤
  protip: "進階技巧: 點選查看日誌時按住 {key} 鍵在新視窗中打開"
  scrollTop: 回到頂部
  scrollBottom: 回到底部
  clear: 清除畫面
  status:
    initializing: 初始化...
    connecting: 連接中...
    connected: 已連接
    disconnected: 已中斷
    closed: 已關閉

containerShell:
  protip: "進階技巧: 點選運作命令時按住 {key} 鍵在新窗口中打開"
  status:
    initializing: 初始化...
    error: "錯誤:{error}"
    connecting: 連接中...
    connected: 已連接
    disconnected: 已中斷
    closed: 已關閉

copyToClipboard:
  tooltip: 複製到剪貼簿
  copied: 已複製

devicePermissions:
  all: 全部
  none: 無
  read: 讀
  write: 寫
  mknod: Mknod

editAccount:
  title: 編輯帳號
  form:
    name:
      label: 名稱
      placeholder: "例如:John Smith"
    kind:
      label: 帳號類型
      user: 用户
      admin: 管理員
    description:
      label: 描述
      placeholder: "例如:John Smith的帳號"
    publicValue:
      label: 登入用戶名
    oldPassword:
      label: 目前密碼
    newPassword:
      label: 新密碼
    confirmPassword:
      label: 確認密碼
    identity:
      label: 標籤

editAliasService:
  title: 編輯服務別名

editApiKey:
  title:
    justCreated: "API Key已建立"
    editing: "編輯API Key"
    new: "新建API Key"
  publicValue:
    label: "Access Key (用戶名)"
  secretValue:
    label: "Secret Key (密碼)"
  name:
    placeholder: "例如:App servers"
  description:
    placeholder: "例如:用於app server佈署容器"
  saveWarning1: "請保存上面的Key！Secret Key僅顯示一次"
  saveWarning2: "如果忘記了Secret Key，您需要重新創建新的API Key"
  noteOptional: "名稱和描述為選填（有助於紀錄API Key的用途），您可以直接點選建立按鈕。"
  #' fixes syntax highlighting so i dont go crazy

editBalancerService:
  title: 編輯負載均衡
  haproxy:
    label: 設定文件(haproxy.cfg)
    help: |
      '此處可設定其他 <a href="http://cbonte.github.io/haproxy-dconv/configuration-1.5.html" target="_blank">haproxy.cfg</a>
      設定項目，相關內容將被附加到 {appName} 產生的配置中。'
    global:
      label: <code>global</code> section
      prompt: 自訂global section設定
    defaults:
      label: <code>defaults</code> section
      prompt: 自訂default section設定

editCertificate:
  title: 編輯憑證
  name:
    placeholder: '例如:mydomain.com'
  description:
    placeholder: '例如:mydomain.com的EV憑證'
  noteKeyWriteOnly: "注意:Private Key部分為只能寫入(write only)因而顯示為空白。更新憑證時您需要重新上傳Private Key，即使Private Key未改變。"

editContainer:
  title:
    vm: 編輯虛擬機
    container: 編輯容器
  name:
    placeholder: '例如:myapp'
  description:
    placeholder: '例如:我的應用'

editExternalService:
  title: 編輯外部服務
  name:
    placeholder: '例如:external-db'
  description:
    placeholder: '例如:外部實體資料庫伺服器'

editHost:
  title: 編輯主機
  hostname:
    label: 主機名稱
    help: 由主機作業系統回報
  customName:
    label: 自訂義名稱
    placeholder: '例如:dev1'
    help: 如果此處未設定，名稱將顯示為主機名
  description:
    label: 描述
    placeholder: '例如:我的開發主機'
  labels:
    label: 標籤

editRegistry:
  title: 编辑映像倉庫
  address:
    label: 位址
  email:
    label: 電子郵件
    placeholder: '例如:you@example.com'
  username:
    label: 用户名
    placeholder: '例如:username'
  password:
    label: 密碼
    placeholder: '例如:password'

editService:
  title: 編輯服務

editStack:
  title: 編輯應用棧
  name:
    label: 名稱
    placeholder: '例如:myapp'
  description:
    label: 描述
    placeholder: "例如:MyApp Stack"

environmentHeader:
  backLink: '應用棧:'
  outputs: 輸出
  add:
    service: 增加服務
    balancer: 增加負載平衡
    external: 增加外部服務
    alias: 增加服務別名
    vm: 增加虛擬機

formatIp:
  noIp: 無
  unknownIp: 未知

formBalancerListeners:
  label: 監聽埠
  addAction: 增加連接埠
  table:
    host: 來源IP/連接埠
    protocol: 協議
    ssl: SSL
    container: 預設目標連接埠
    listener: 通過
  host:
    placeholder: "主機端連接埠，例如:80"
  protocol:
    placeholder: '選擇協定:'
  container:
    placeholder: "容器端連接埠，例如:8080"
  listen:
    public: 公開
    internal: 內部

formCommand:
  command:
    label: 命令
    placeholder: "例如:/usr/sbin/httpd -f httpd.conf"
  entryPoint:
    label: 入口
    placeholder: "例如:/bin/sh -c"
  workingDir:
    label: 工作目錄
    placeholder: '例如:/myapp'
  user:
    label: 用户
    placeholder: '例如:apache'
  console:
    label: 控制台
    both: '互動 &amp; TTY终端 <span class="text-muted">(-i -t)</span>'
    interactive: '互動 <span class="text-muted">(-i)</span>'
    terminal: 'TTY终端 <span class="text-muted">(-t)</span>'
    none: 無
  autoRestart:
    label: 自動重啟
    startOnceFalse: 總是
    startOnceTrue: 從不（僅啟動一次）
    no: 從不
    onFailure: '失敗時 <span class="text-muted">(非0退出代碼)</span> 總是'
    onFailureCondPrefix: 失敗時，最多
    onFailureCondSuffix: |
      {limit, plural,
        =1 {次}
        other {次}
      }
    always: 總是
  environment:
    label: 環境變量
    addAction: 增加環境變量
    keyLabel: 變量
    keyPlaceholder: '例如:foo'
    valueLabel: 值
    valuePlaceholder: '例如:bar'

formContainerLinks:
  label: 連結
  addActionLabel: 增加連結
  noContainers: 沒有其他容器可連接
  noLinks: 目前容器沒有連接
  targetInstance:
    label: 目標容器
    prompt: 選擇一個容器...
  name:
    label: 名稱
    placeholder: '例如:database'

formDisks:
  addDiskLabel: 增加磁碟
  addRootDiskLabel: 增加根磁碟
  name:
    rootDisk: 根磁碟
    label: 名稱
    placeholder: '例如:data'
  size:
    label: 大小
    rootDisk: 由系統映像決定
  driver:
    label: 驅動

formEngineOpts:
  engineInstallUrl:
    label: Docker安裝URL
    placeholder: "例如:http://get.docker.com"
  engineStorageDriver:
    label: 存儲驅動
    placeholder: '例如:overlay'
  engineOpts:
    label: 引擎選項
    addActionLabel: 增加引擎選項
    keyPlaceholder: '例如:log-driver'
    valuePlaceholder: '例如:syslog'
  engineLabels:
    label: 引擎標籤
    addActionLabel: 增加引擎標籤
    keyLabel: 標籤
  engineEnv:
    label: 引擎環境
    addActionLabel: 增加環境變量
    keyLabel: 變量
    keyPlaceholder: '例如:HTTP_PROXY'
    valuePlaceholder: "例如:http://your-proxy:8080"
  engineInsecureRegistry:
    label: 非安全映像庫
    addActionLabel: 增加非安全映像庫
    valueLabel: 映像庫域名
    valuePlaceholder: '例如:registry.example.com'
  engineRegistryMirror:
    label: 映像庫映像
    addActionLabel: 增加映像庫映像
    valueLabel: 映像URL
    valuePlaceholder: "例如:https://my-mirror.example.com:5000"

formHealthCheck:
  label: 健康檢查
  checkType:
    none: 無
    tcp: TCP連接
    http: HTTP回應2xx/3xx
  request:
    label: HTTP請求
  method:
    prompt: 選擇HTTP方法
  path:
    placeholder: '请求路径，例如:/healthcheck'
  version:
    prompt: 选择HTTP版本
  host:
    label: 主机头信息
    placeholder: '例如:www.example.com'
  port:
    label: 端口
    placeholder: '例如:80'
  initializingTimeout:
    label: 初始化超时
    unit: 毫秒
  interval:
    label: 检查间隔
    unit: 毫秒
  timeout:
    label: 检查超时
    unit: 毫秒
  healthyThreshold:
    label: 健康阈值
    unit: 次成功
  unhealthyThreshold:
    label: 不健康阈值
    unit: 次失败
  strategy:
    label: 不健康时
    none: 不进行操作
    recreate: 重新创建
    recreateOnQuorumPrefix: 重新创建，仅当至少
    recreateOnQuorumSuffix: |
      {quorum, plural,
        =1 {个容器}
        other {个容器}
      } 健康时

formKeyValue:
  addAction: 添加键值对
  key:
    label: 键
    placeholder: 键
  separator: "="
  value:
    label: 值
    placeholder: 值
  protip: "高级技巧: 在键(Key)输入栏中粘贴一行或多行的key=value键值对能够批量输入。"

formImage:
  label: 选择镜像
  vm:
    placeholder: 例如:rancher/vm-ubuntu
    dropdownLabel: "{appName} 镜像"
  container:
    placeholder: "例如:ubuntu:trusty"
  pullImage:
    label: 创建前总是拉取镜像

formNameDescription:
  name:
    label: 名称
    placeholder: 名称
  description:
    label: 描述
    placeholder: 描述

formPorts:
  addAction: 端口映射
  public:
    label: "公开主机[IP:]端口"
    placeholderWithIp: "例如:80 或 1.2.3.4:80"
    placeholderWithoutIp: '例如:80'
  private:
    label: 私有容器端口
    placeholder: '例如:8080'
  protocol:
    label: 协议
  noPorts: 当前容器没有端口映射

formScale:
  label: 数量
  global:
    vm: 总是在每台主机上运行一个此虚拟机的实例
    container: 总是在每台主机上运行一个此容器的实例
  regular:
    vm: |
      Run {scale, plural,
        =0 {无虚拟机}
        =1 {1 台虚拟机}
        other {# 台虚拟机}
      }
    container: |
      Run {scale, plural,
        =0 {无容器}
        =1 {1 个容器}
        other {# 个容器}
      }

formSecurity:
  logConfig:
    addActionLabel: 添加选项
    keyPlaceholder: '例如:syslog-facility'
    valuePlaceholder: '例如:daemon'
  privileged: 特权
  fullAccess: 主机完全访问权限
  pidMode: PID模式
  host: 主机
  memoryLimit: 内存限制
  mb: MB
  swapLimit: +Swap限制
  cpuPinning: CPU绑定
  shares: 份额
  capabilities: 内核能力
  helpBlock:
    text: 内核能力能够对容器所拥有的超级用户权限进行更细粒度的控制
    link: 更多信息
  deviceBinding: 设备绑定
  pathHost: 主机内路径
  pathContainer: 容器内路径
  permissions: 权限
  logDriver: 日志驱动
  logOptions: 日志选项

formServiceLinks:
  addAction: 服务链接
  noServices: 无其他服务可链接
  noLinks: 当前服务没有服务链接
  service:
    label: 目标服务
    prompt: 选择服务...
  name:
    label: 名称
    placeholder: '例如:database'

formSslTermination:
  defaultCertificate:
    prompt: 选择证书...
  alternateCertificate:
    prompt: 选择证书...

formTargets:
  title: 目标
  addAction: 添加服务
  hostname:
    label: 请求主机
    placeholder: '例如:svc.com'
  srcPort:
    label: 源端口
    placeholder: '例如:80'
  value:
    label: 目标服务
    prompt: 选择服务...
  path:
    label: 请求路径
    placeholder: "例如: /svc"
  dstPort:
    label: 目标端口
    placeholder: '例如:8080'
  advanced:
    toggle: 显示高级路由选项
    detail: 根据端口、主机头或请求路径等信息将请求转发到不同服务
    help1: |
      如果指定了请求主机和/或路径，HTTP监听端口上的连接将会被路由到基于请求的合适目标。
      例如，您可以使用此设置根据请求主机信息domain1.com 和 domain2.com将访问发送到不同服务，或者将 domain3.com/admin的访问发送到一个不同的服务上。
    help2: |
      匹配的请求将会被发送到目标服务的目标端口。
      如果目标端口未设置，将使用缺省目标端口。如果缺省目标端口也未设置，将使用源端口。
  noHostnames: (不能负载均衡到主机名)

formUserLabels:
  addAction: 添加标签
  key:
    label: 键
    placeholder: '例如:foo'
  separator: "="
  value:
    label: 值
    placeholder: '例如:bar'
  protip: "高级技巧: 粘贴一行或多行的 key=value键值对能够批量输入。"

formValueArray:
  addActionLabel: 添加值
  valueLabel: 值
  valuePlacholder: 值
  protip: "高级技巧: 在任意输入栏中粘贴一行或多行的 value能够批量输入。"

formVolumes:
  value:
    prompt: 选择容器...

heroAddService:
  header: 添加第一个服务
  paragraph1: |
    简单而言，服务是一组由相同docker镜像创建的容器，Rancher服务扩展了Docker的“link”概念以利用{appName}的轻量级分布式DNS服务用于服务发现。
    服务可以单独添加或通过应用商店部署。
  paragraph2: "服务也能够利用其他{appName}内置服务，如负载均衡、健康监控、升级支持以及高可用。"
  contentLink: 了解更多
  addService: 添加服务
  linkToCatalog: 从应用商店添加

hostSettings:
  header: 主机注册URL
  subtext: "主机连接{appName} API的Base URL是？"
  hostUrl:
    local: '当前站点地址:'
    new:
      labelText: '其他地址:'
      placeholder: "例如:http://example.com:8080"
  helpText:
    static1: "不要包含 <code>/v1</code> 或任何其他路径，但如果你设置了"
    static2: "在 {appName} 前面，请确保使用<code>https://</code>."
    isRancher: '<a href="{docsBase}/installing-rancher/installing-server/basic-ssl-config/" target="_blank">SSL Termination(SSL终止) </a>'
    sslTerm: SSL终止
  notPublic:
    alert: |
      确定要创建的所有主机都能够连接 <code>{activeValue}</code> ？<br/> 当前地址似乎是私有IP或内部网络。

hostPod:
  machineInfo:
    active:
      activating: |
        即将完成&hellip;<br/>
        <i class="icon icon-spinner icon-spin"></i> 等待客户端代理连接
    deactivated:
      error: 创建主机出错
      setup: 设置主机中...
    groupedInstances:
      namespace: '命名空间:'
      stack: '应用栈:'
      standalone: 独立容器

identityBlock:
  loading: 加载中...

infoMultiStats:
  connecting: 连接中...
  utilizationStats: 使用率统计数据仅在活动/运行时可见
  cpuSection:
    labelText: CPU
    system: 系统
    user: 用户
  networkSection:
    labelText: 网络
    transmit: 发送
    receive: 接收
  memorySection:
    labelText: 内存
    used: 已使用
  storageSection:
    labelText: 存储
    read: 读
    write: 写

inputCertificate:
  key:
    label: 私钥
    placeholder: "粘贴或导入私钥，以-----BEGIN RSA PRIVATE KEY-----开头"
  cert:
    label: 证书
    placeholder: "粘贴或导入证书，以-----BEGIN CERTIFICATE-----开头"
  certChain:
    label: 证书链
    placeholder: "可选:粘贴或导入额外的证书链，以-----BEGIN CERTIFICATE-----开头"

inputIdentity:
  placeholder:
    github: 添加GitHub用户或组织名称
    generic: 添加用户名或组名

inputPassword:
  buttonText: 生成

inputTextFile:
  tooltip: 从文件读取


k8s:
  servicePorts:
    port: 端口
    containerPort: 容器端口
    nodePort: Node端口
    protocol: 协议
    noPorts: 无端口
  containersSection:
    containerName: 容器名称
    status: 状态
    message: 消息
    ready: 就绪
    restarts: 重启
    noContainers: 无容器
  formContainerPorts:
    portMap: 端口映射
    addPort: 添加端口
    table:
      header:
        hostIp: 主机IP
        hostPort: 主机端口
        containerPort: 容器端口
        protocol: 协议
      body:
        name: '例如:web'
        hostIp: '例如:19.82.8.24'
        hostPort: '例如:80'
        containerPort: '例如:8080'
    noPorts: 此容器没有映射端口
  newOrEditResource:
    placeholder: 资源YAML或JSON定义
  podSection:
    podName: Pod名称
    containers: 容器
    status: 状态
    hostIp: 主机IP
    podIp: "Pod IP"
    noPods: 无Pods
  serviceRow:
    clusterIp: "Cluster IP"

lbAddtlInfo:
  viewDetails: 查看详情
  defaultCertificate: 缺省证书
  alternateCertificate: 替换证书
  description: "描述: "
  containers: 容器
  noContainers: 无容器
  scale: 数量
  ports: 端口
  noPorts: 无公开主机端口
  targets: 目标
  to: 到

labelsSection:
  kind: 类型
  key: 键
  value: 值
  noData: 无标签

loginGitHub:
  buttonText: GitHub验证

loginUserPass:
  userLabel: 用户名
  userPlaceholder: '例如:jsmith'
  loginLabel: 登录
  loggingInLabel: 登录中...
  passwordLabel: 密码

machine:
  driverAmazon:
    accessSection: 账户访问
    accessKey:
      label: "Access Key"
      placeholder: "你的AWS access key"
    secretKey:
      label: "Secret Key"
      placeholder: "你的AWS secret key"
      provided: 已提供
    accessKeyHelp: 在此粘贴你的AWS密钥对，我们将用秘钥创建新的实例。
    loginAction: '下一步:验证及选择网络'
    loadingAvailability: 从EC2加载可用区和VPC信息...
    vpcSection: "可用区 & VPC"
    availabilityZone: 可用区
    subnet: VPC/Subnet
    securityGroupSelect: '下一步:选择安全组'
    loadingSecurity: 从EC2加载安全组信息...
    securityGroupSection: 安全组
    securityGroup:
      label: 安全组
      defaultExisting: "标准:使用现有的 <code>{groupName}</code> 安全组"
      defaultCreate: "标准:自动创建新的 <code>{groupName}</code> 安全组"
      custom: '自定义:选择现有安全组'
      updating: 更新安全组...
      creating: 创建安全组...
    portHelp:
      link: 了解更多
      text: 关于将要开放的端口信息
    needs:
      label: '{appName} 正常工作需要安全组允许以下通讯:'
      item1: '从 {appName} 服务器到主机的 <code>TCP</code> 端口 <code>22</code> <span class="text-muted">(SSH连接以安置配置Docker)</span>'
      item2: 与其他所有主机之间的 <code>UDP</code> 端口 <code>500</code> 和 <code>4500</code> <span class="text-muted">(用于IPsec网络)</span></li>
      item3: 这些规则 <b>不会</b> 被自动添加
    setInstanceAction: '下一步:设置实例选项'
    instanceSection: 实例
    instanceOptionsSection: 实例选项
    instanceType:
      label: 实例类型
    rootSize:
      label: 根分区硬盘大小
      unit: GB
    ami:
      label: Amazon系统映像(AMI)
      placeholder: "Ubuntu AMI"
      rancherList: "RancherOS AMI列表"
    sshUser:
      label: SSH用户
      placeholder: '例如:ubuntu'
    iam:
      label: IAM配置文件
    privateIp:
      label: 私有IP
    onlyPrivate:
      label: 仅使用私有IP地址

  driverAzure:
    accountAccessSection: 账户访问
    username:
      label: 用户名
      placeholder: Azure账户用户名
    password:
      label: 密码
      placeholder: Azure账户密码
    subscriptionId:
      label: 订阅ID
      placeholder: Azure订阅ID
    subscriptionCert:
      label: 订阅证书
      placeholder: Azure订阅证书
    instanceSection: 实例
    image:
      label: 镜像
      placeholder: "Ubuntu 15.10 x64"
    size:
      label: 规格
    sshPort:
      label: SSH端口
      placeholder: '例如:22'
    dockerPort:
      label: Docker端口
      placeholder: '例如:2376'
    dockerSwarm:
      label: "Docker Swarm Master端口"
      placeholder: '例如:3376'
    publishSettingsFile:
      label: 发布配置
      placeholder: 发布配置文件
    regionSection: 区域
    region:
      label: 区域

  driverCustom:
    step1: '启动一台Linux机器并安装最新版本的 <a href="http://www.docker.com/" target="_blank">Docker</a> 。'
    step2: '确认安全组或防火墙允许以下通讯:'
    step2li: '与其他所有主机之间的 <code>UDP</code> 端口 <code>500</code> 和 <code>4500</code> <span class="text-muted">(用于IPsec网络)</span>'
    step3: "可选项: 在主机上增加标签"
    step4: "可选项:设置主机使用的Public IP。如果添加的是运行 <code>rancher/server</code> 容器的主机则必须设置此选项。"
    step5Copy: 将下列脚本拷贝到每一台主机上运行以注册
    generating: 生成注册URL...
    step5Close:
      part1: 点击下面的关闭按钮，新的主机注册后会显示在
      link: 主机
      part2: 页面。
    close: 关闭

  driverDigitalocean:
    accountSection: 账户访问
    accessToken:
      label: 访问令牌*
      placeholder: "你的DigitalOcean API访问令牌"
      help: |
        由<a href="https://cloud.digitalocean.com/settings/applications" target="_blank">Apps & API</a>
        页面获取的DigitalOcean个人访问令牌
    instanceSection: 实例
    image:
      label: 镜像
    size:
      label: 大小
    regionSection: 区域
    region:
      label: 区域
    optionsSection: 选项
    backups:
      label: 启用备份
    ipv6:
      label: 启用IPv6
    privateNetworking:
      label: 启用私有网络

  driverExoscale:
    accountSection: 账户访问
    apiKey:
      label: "API Key"
      placeholder: "你的Exoscale API Key"
    secretKey:
      label: "Secret Key"
      placeholder: "你的Exoscale secret key"
      provided: 已提供
    accountHelp: 在此粘贴你的Exoscale密钥对，我们将用秘钥创建新的实例。
    loginAction: 下一步:验证及选择安全组
    loadingSecurity: 从Exoscale加载安全组...
    securityGroupSection: 安全组
    securityGroup:
      label: 安全组
      defaultExisting: "标准:使用现有的 <code>{groupName}</code> 安全组"
      defaultCreate: "标准:自动创建 <code>{groupName}</code> 安全组"
      custom: '自定义:选择现有安全组'
      updating: 更新安全组...
      creating: 创建安全组...
    portHelp:
      link: 了解更多
      text: 關於將要開放的連接埠訊息
    needs:
      label: "{appName} 正常工作需要安全组允許以下通訊:"
      item1: '從 {appName} 伺服器到主機的 <code>TCP</code> 連接埠 <code>22</code> <span class="text-muted">(SSH連接以安裝設定Docker)</span>'
      item2: 與其他所有主機之間的 <code>UDP</code> 連接埠 <code>500</code> 和 <code>4500</code> <span class="text-muted">(用於IPsec網路)</span>
      item3: 這些規則 <b>不會</b> 被自動增加
    selectSecurityGroupAction: '下一步:设置实例选项'
    loadingInstance: 读取可用实例配置...
    instanceSection: 实例
    instanceProfile:
      label: 实例配置文件
    diskSize:
      label: Root大小


  driverOther:
    driverSection: 驱动
    driver:
      label: 驱动
    optionsSection: "{driverName} 选项"

  driverPacket:
    accountSection: 账户访问
    projectId:
      label: 项目
      placeholder: 你的Packet项目ID
    apiKey:
      label: "API Key"
      placeholder: "你的Packet API Key"
    apiKeyHelp: '由Packet的 <a href="https://app.packet.net/portal#/api-keys" target="_blank">API Keys</a> 页面获取'
    instanceSection: 实例
    image:
      label: 镜像
    size:
      label: 大小
    regionSection: 区域
    region:
      label: 区域

  driverRackspace:
    accountSection: 账户访问
    username:
      label: 用户名
      placeholder: 你的RackSpace用户名
    apiKey:
      label: "API Key"
      placeholder: "你的RackSpace APK Key"
    accountHelp: RackSpace控制面板中的帳號設定
    regionSection: 区域
    region:
      label: 区域
    instanceSection: 实例
    flavor:
      label: Flavor

  driverUbiquity:
    accountSection: 账户访问
    clientId:
      label: "Reseller ID"
      placeholder: "你的Ubiquity Hosting API Reseller ID"
    apiUsername:
      label: "Remote ID"
      placeholder: "你的Ubiquity Hosting API Reseller ID"
    apiToken:
      label: "Access Key"
      placeholder: "你的Ubiquity Hosting Access Key"
      provided: 已提供
    accountHelp: 你可以从 <a href="https://motion.ubiquityhosting.com/api"> 这里 </a>找到你的Ubiquity Hosting API密码。还没有账号？了解更多 <a href="http://www.ubiquityhosting.com/">Ubiquity Hosting</a> 信息！
    loginAction: '下一步:认证并创建一个Cloud实例'
    loadingInstance: 加载Cloud实例创建过程详细..
    instanceSection: 实例
    regionSection: 区域
    region:
      label: 区域
    image:
      label: 镜像
    flavor:
      label: Flavor

  driverVsphere:
    accountSection: 账户访问
    vcenter:
      label: "vCenter 主机"
      placeholder: vCenter或者ESXi主机名/IP
    vcenterPort:
      label: vCenter端口
    username:
      label: 用户名
    password:
      label: 密码
    instanceSection: 实例
    cpuCount:
      label: CPUs
    memorySize:
      label: 記憶體
      unit: MB
    diskSize:
      label: 磁碟
      unit: MB
    boot2dockerUrl:
      label: "OS ISO URL"
      placeholder: '缺省:最新的boot2docker镜像'
    schedulingSection: 计划
    dataCenter:
      label: 資料中心
    pool:
      label: 池
    host:
      label: 主機
      placeholder: 使用群集时输入"/"
    network:
      label: 網路
    dataStore:
      label: 數據儲存

modalAboutComponent:
  component: 元件
  version: 版本
  cattle: Cattle
  ui: 用户界面
  compose: Compose
  machineService: "Machine Service"
  docerkMachine: docker-machine
  close: 關閉

modalAuditlogInfo:
  header: 额外日志信息
  request: '請求對象:'
  response: '回應對象:'
  closer: 關閉

modalConfirmDeactiviate:
  header: 是否確認要
  protip: "高级技巧:在点击 {isServiceButton} 时按住 {alternateLabel}  键以跳过确认操作"
  cancel: 取消

modalEditDriver:
  header:
    create: "增加 Machine 驅動"
    edit: "編輯 Machine 驅動"
  url:
    label: 下载URL
    help: "64位Linux Docker-Machine驅動下載位址"
  uiUrl:
    label: "自定義UI URL"
    help: 可選:加載該驅動自定義增加主機介面的URL
    link: '參考 <a href="https://github.com/rancher/ui-driver-skel" target="_blank">ui-driver-skel</a> 以了解更多訊息。'
  checksum:
    label: 校驗
    help: "可選: 检验下载的驱动是否匹配期望的校验和"

modalProcessError:
  header: 異常訊息
  cause: '原因:'
  none: N/A
  stackTrace: '堆栈追蹤:'
  close: 關閉

modalShell:
  title: "命令行:{instanceName}"

newAliasService:
  header: 增加服務别名

newBalancer:
  header: 增加負載均衡
  note: |
    <p><strong>注意:</strong> 未匹配任何&quot;高级路由选项&quot;的请求将被发送到<strong>全部</strong> ({targetResources}) 配置的目标服务（轮询方式）的默认目标端口（根据请求的源端口确认）。</p>
  tabs:
    ssl: SSL终止
    stickiness: 会话粘性
    custom: 自定義haproxy.cfg
    labels: 標籤
    scheduling: 調度
  helpBlock: |
    <p class="help-block">此處可以設定其他 <a href="http://cbonte.github.io/haproxy-dconv/configuration-1.5.html" target="_blank">haproxy.cfg</a> 配置项，相关内容将被附加到 {appName} 生成的配置中。 </p>
  labelGlobal: <code>global</code> section
  labelDefault: <code>defaults</code> section


newCatalog:
  version:
    prompt: 選擇版本...
  saveUpgrade: 升级
  saveNew: 启动
  upgrade: '升级:'
  catalog: '应用商店:'
  category: '類別:'
  support: '支援:'
  official: 官方認證
  maintainedBy: 由社區成員維護
  maintainer: '維護者:'
  license: '授權:'
  url: '项目URL:'
  stack: 应用栈
  templateVersion: 範本版本
  selectVersion: 選擇一個範本版本
  newStack: 新应用栈
  config: 配置选项
  unknownType: '未識別問題類型:'
  startService: 创建后启动服务
  preview: 預覽
  txt: answers.txt

newContainer:
  service: |
    {numServices, plural,
      =1 {服務}
      other {服務}
    }
  tabs:
    disks: 磁碟
    userData: 用户資料
    command: 命令
    volumes: 卷
    networking: 網路
    security: 安全/主機
    healthCheck: 健康检查
    labels: 標籤
    scheduling: 調度
  selectUpgrade: 選擇一個或者多個服務進行升級
  saveUpgrade: 升级
  saveNew: 创建
  removeSidekick: 删除从容器
  name:
    placeholder: '例如:myapp'
  description:
    placeholder: '例如:我的應用'
  emptyPrimaryService: (主服务)
  emptySidekick: "(从容器 #{num})"
  addSidekickContainer: 添加从容器
  addSidekickVm: 添加从虚拟机

newExternalService:
  header: 添加外部服务
  alert: '注意:此设置仅当外部服务为负载均衡的目标服务时使用。'

pageFooter:
  notARelease: (非正式发布)
  help: 幫助
  documentation: 文件
  faq: 常見問題
  issues: 提交問題
  forums: 論壇
  download:
    link: 下載CLI
    mac: "Mac OS X"
    windows: Windows
    linux: Linux

pageHeaderEnvironment:
  namespace: 命名空间

projectRow:
  none: 無描述
  orchestration: 编排

registryRow:
  address: 位址
  email: 電子郵件
  username: 用户名
  created: 建立時間

schema:
  inputBoolean:
    y: "True"
    n: "False"
  inputCertificate:
    prompt: 選擇憑證...
  inputEnum:
    option: 選項...
  inputService:
    prompt: 選擇服務...

saveCancel:
  saving: 儲存中...
  saved: 已儲存！
  edit: 編輯
  create: 建立
  cancel: 取消

schedulingRuleRow:
  theHost: 主機
  haveA: 具有
  of: 其

sidekickAddtlInfo:
  info: 訊息
  image: 映像
  entryPoint: 入口
  command: 命令
  containers: 容器
  noContainers: 無容器
  labels: 標籤
  noLabels: 無標籤

stackSection:
  outputs: 输出
  description: 描述
  none: 無服務
  container: |
    {numContainers, plural,
      =1 {容器}
      other {容器}
    }
  service: |
    {numServices, plural,
      =1 {服務}
      other {服務}
    }
  sidekick: |
    {numSidekicks, plural,
      =1 {从容器}
      other {从容器}
    }
  add:
    service: 添加服务
    loadBalancer: 添加负载均衡
    serviceAlias: 添加服务别名
    externalService: 添加外部服务
    virtualMachine: 添加虚拟机
  table:
    dataTitle:
      state: 狀態
      serviceName: 服務名稱
      kind: 類型
      details: 查看詳情
      containers: 容器
      actions: 操作


storagePoolSection:
  outputs: 输出
  readOnly: (唯讀)
  hosts:
    header: 主机
    none: 无主机
  volumes:
    header: 卷
    add: 添加卷
    none: 无数据卷
  models:
    table:
      header:
        activeMounts: '挂载(容器:主机)'

svgServiceContainer:
  sidekicks: 从容器

swarm:
  containerSection:
    state: 狀態
    name: 容器名稱
    image: 映像
    none: 无容器
  serviceSection:
    state: 狀態
    name: 服務名稱
    ports: 連接埠
    containers: 容器
    none: 无服务

tooltipLink:
  list: 列表
  linkGraph: 链接图
  composeYaml: "Compose YAML"

tooltipWarning:
  notConfigured: 未设置访问控制
  dismiss: 取消

viewEditDescription:
  form:
    name:
      placeholder: '例如:lab'
    description:
      placeholder: '例如:開發測試環境'

viewEditProject:
  showEdit:
    edit: 編輯環境
    add: 增加環境
    orchestration: 容器编排
    formControl: 訪問控制
  header: 环境
  description: 描述
  helpBlock: |
    未启用访问控制。<br/>
    任何访问API/UI的人都具有管理员权限，并能够使用任何环境。
  virtualMachine:
    label: 虛擬機支援
    subtext: |
      要求主机加载 <a href="https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine" target="_blank">KVM</a> 内核模块


vmConsole:
  header: '控制台:'
  protip: "高级技巧:启动命令行时按下 {alternateLabel} 键可在新窗口中打开."
  canvas: 暫不提供Canvas支援
  footerActions:
    buttonSend: 发送Ctrl-Alt-Delete
    buttonCancel: 關閉

volumeRow:
  activeMounts:
    readOnly: （唯讀）
##############################
# Mixins
##############################
containerChoices:
  hostGroup: "主機:{name}"
  hostGroupWithState: "主機:{name}{state}"
  unknownHost: "主機:???"
  containerOption: "{name}"
  containerOptionWithState: "{name} ({state})"

driver:
  multiHostNames: "主機將被命名為 <b>{first}</b> &mdash; <b>{last}</b>"

##############################
# Services
##############################
allServices:
  stackGroup: "应用栈:{name}"
  noName: "(应用栈:{id})"

##############################
# Utils
##############################

##############################
# Navigation
##############################
nav:
  srToggleNav: 切换导航
  srToggleDropdown: 切换下拉選單
  environment:
    label: 環境
    all: 所有環境
    your: 你的環境
    selected: 當前環境
    manage: 環境管理
  namespace:
    label: 命名空间
    manage: 命名空间管理
  k8s:
    tab: Kubernets
    services: 服務
    rcs: "Replication Controllers"
    pods: Pods
    cli: Kubectl
    system: 系统
  swarm:
    tab: Swarm
    projects: 項目
    services: 服務
    cli: CLI
    system: 系统
  mesos:
    tab: Mesos
    web: 概览
    system: 系统
  cattle:
    tab: 应用栈
    all: 全部
    user: 用户
    system: 系统
  catalog:
    tab: 应用商店
    all: 全部
    library: Library
  infra:
    tab: 基礎架構
    hosts: 主機
    containers: 容器
    vms: 虛擬機
    storagePools: 存儲池
    certificates: 憑證
    registries: 映像庫
  admin:
    tab: 系统管理
    audit: 审计日志
    processes: 處理程序
    accounts: 帳號設定
    access: 存取控制
    machine: 主机驱动
    settings: 系統設定
    ha: 高可用
  api:
    tab: API
  user:
    label: "用戶選單:{username}"
    logout: 登出
    yourAccount: 你的帳號
    changePassword: 修改密码
    theme: 主题
    themeLight: 淺色
    themeAuto: 自動
    themeDark: 黑色

##############################
# Resource Actions
##############################
action:
  activate: 啟用
  cancelUpgrade: 取消升级
  cancelRollback: 取消回滚
  clone: 再製
  console: 打开控制台
  deactivate: 停用
  edit: 編輯
  execute: 执行命令行
  exportConfig: 匯出設定
  finishUpgrade: 升级完成
  logs: 查看日志
  machineConfig: 主機設定
  purge: 清除
  remove: 删除
  restart: 重啟
  restore: 恢復
  retry: 重試
  rollback: 回滚
  setDefault: 設定預設
  start: 啟動
  startServices: 啟動服務
  stop: 停止
  stopServices: 停止服務
  switchNamespace: 切换至此命名空间
  switchEnvironment: 切換到此環境
  upgrade: 升级
  viewConfig: 查看設定
  viewGraph: 查看圖解
  viewInApi: 查看API
